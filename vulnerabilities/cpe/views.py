import nvdlib
from datetime import datetime

from rest_framework import status, permissions, authentication
from rest_framework.views import APIView
from rest_framework.response import Response

from .models import *
from .serializers import *

# Create your views here.

class CsrfExemptSessionAuthentication(authentication.SessionAuthentication):
    def enforce_csrf(self, request):
        return

class createCPE(APIView):
    #TODO Permissions
    permission_classes = (permissions.AllowAny,)
    authentication_classes = (CsrfExemptSessionAuthentication, 
    authentication.SessionAuthentication,)

    def post(self, request):
        try:
            data = request.data
            Reqvendor = data.get('vendor')
            Reqproduct = data.get('name')
            iter = 0
            productQuery = product.objects.filter(name=Reqproduct)
            if productQuery.exists():
                return Response({'details':'product exists in database'},
                     status=status.HTTP_302_FOUND)
            cpes = nvdlib.searchCPE(cpeMatchString=f'cpe:2.3:a:{Reqvendor}:{Reqproduct}', cves=True)
            productSer = productSerializer(data=data)
            if productSer.is_valid():
                productSaved = productSer.save()
            else:
                return Response(productSer.errors, status=status.HTTP_406_NOT_ACCEPTABLE)
            for eachCpe in cpes:
                data = dict()
                data['name'] = eachCpe.name
                data['title'] = eachCpe.title
                data['deprecated'] = eachCpe.deprecated
                data['cpe23Uri'] = eachCpe.cpe23Uri
                data['lastModifiedDate'] = datetime.strptime(eachCpe.lastModifiedDate.split('T')[0], '%Y-%M-%d').date()
                # data['titles'] = eachCpe.titles
                data['refs'] = eachCpe.refs
                data['deprecatedBy'] = eachCpe.deprecatedBy
                cpeName = eachCpe.name.split(':')
                data['versionPart1'] = cpeName[-8]
                data['versionPart2'] = cpeName[-7]
                data['versionPart3'] = cpeName[-6]
                data['versionPart4'] = cpeName[-5]
                data['versionPart5'] = cpeName[-4]
                data['versionPart6'] = cpeName[-3]
                data['versionPart7'] = cpeName[-2]
                data['versionPart8'] = cpeName[-1]
                cpeSerializer = cpeVulnerabilitySerializer(data=data)
                if cpeSerializer.is_valid():
                    cpeSaved = cpeSerializer.save()
                    iter+=1
                    productShip = productCpeShip.objects.create(whichProduct =productSaved, whichCpe = cpeSaved)
                else:
                    return Response(cpeSerializer.errors, status=status.HTTP_406_NOT_ACCEPTABLE)
            return Response({'details':f'{iter} cpes saved'}, status=status.HTTP_201_CREATED)
        except Exception as e :
            return Response({'details':str(e)}, status=status.HTTP_400_BAD_REQUEST)

    def get(self, request):
        pass

