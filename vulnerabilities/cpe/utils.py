import nvdlib
from datetime import datetime
import json

#*********************************
#*** Variables in response CVEs***
#*********************************
'''
Variables in response for CVEs :
cve (dict) : CVE ID, description, reference links, CWE.
configurations (dict) : CPE applicability statements and optional CPE names.
impact (dict) : CVSS severity scores
publishedDate (ISO 8601 date/time format including time zone.) : CVE publication date
lastModifiedDate (ISO 8601 date/time format including time zone.) : CVE modified date
id (str) : CVE ID
cwe (str) : Common Weakness Enumeration Specification (CWE)
url (str) : Link to additional details on nvd.nist.gov for that CVE.
v3score (list) : List that contains V3 or V2 CVSS score (float 1 - 10) as index 0 and the version that score was taken from as index 1.
v2vector (str) : Version two of the CVSS score represented as a vector string, a compressed textual representation of the values used to derive the score.
v3vector (str) : Version three of the CVSS score represented as a vector string.
v2severity (str) : LOW, MEDIUM, HIGH (Critical is only available for v3).
v3severity (str) : LOW, MEDIUM, HIGH, CRITICAL.
v2exploitability (float) : Reflects the ease and technical means by which the vulnerability can be exploited.
v3exploitability (float) : Reflects the ease and technical means by which the vulnerability can be exploited.
v2impactScore (float) : Reflects the direct consequence of a successful exploit.
v3impactScore (float) : Reflects the direct consequence of a successful exploit.
score (list) : Contains the v3 CVSS score (v2 if v3 isn't available) [score, severity, version]. Where score is an int, severity is a string('LOW','MEDIUM','HIGH','CRITICAL'), and version is a string (V3 or V2).
'''

#*********************************
#*** Variables in response CPEs***
#*********************************
'''
Variables in response CPEs:
name (str) : CPE URI name
title (str) : The first title result of the CPE.
deprecated (bool) : Indicates whether CPE has been deprecated
cpe23Uri (str) : The CPE name
lastModifiedDate : CPE modification date
titles (dict) : Human-readable CPE titles
refs (dict) : Reference links.
deprecatedBy : If deprecated=true, one or more CPE that replace this one
vulnerabilities (list) : Optional vulnerabilities associated with this CPE. Must use 'cves = true' argument in searchCPE.
'''

class nvdDb():
    def __init__(self, vendor=None, product=None, type=None):
        self.cpes = list()
        self.cves = dict()
        if vendor and product:
            self.vendor = vendor
            self.product = product
            if type =='application':
                self.type='a'
            elif type =='os':
                self.type = 'o'
            self.searchCPE()
        else:
            self.vendor = None
            self.product = None   
        

    def searchCPE(self):
        cpes = nvdlib.searchCPE(cpeMatchString=f'cpe:2.3:{self.type}:{self.vendor}:{self.product}', key='0db460eb-d8b4-4c70-900d-9f1a1d9dbe21')
        for eachCpe in cpes:
            data = dict()
            data['name'] = eachCpe.name
            data['title'] = eachCpe.title
            data['deprecated'] = eachCpe.deprecated
            data['cpe23Uri'] = eachCpe.cpe23Uri
            data['lastModifiedDate'] = datetime.strptime(eachCpe.lastModifiedDate.split('T')[0], '%Y-%M-%d').date()
            data['refs'] = eachCpe.refs
            data['deprecatedBy'] = eachCpe.deprecatedBy
            cpeName = eachCpe.name.split(':')
            data['versionPart1'] = cpeName[-8]
            data['versionPart2'] = cpeName[-7]
            data['versionPart3'] = cpeName[-6]
            data['versionPart4'] = cpeName[-5]
            data['versionPart5'] = cpeName[-4]
            data['versionPart6'] = cpeName[-3]
            data['versionPart7'] = cpeName[-2]
            data['versionPart8'] = cpeName[-1]
            self.cpes.append(data) 

    def searchCVE(self, cpe):
        self.cves[cpe] = list()
        cve = nvdlib.searchCVE(cpeName=cpe, key='0db460eb-d8b4-4c70-900d-9f1a1d9dbe21')
        for eachVuln in cve:
            data = dict()
            data['cveId'] = eachVuln.id
            data['dataType'] = eachVuln.cve.data_type
            data['dataFormat'] = eachVuln.cve.data_format
            data['dataVersion'] = eachVuln.cve.data_version
            data['assigner'] = eachVuln.cve.CVE_data_meta.ASSIGNER
            # data['problemtype'] =vars(eachVuln.cve.problemtype)
            # data['references'] = vars(eachVuln.cve.references)
            # data['description'] = vars(eachVuln.cve.description)
            # data['configurations'] = vars(eachVuln.configurations)
            # data['baseMetricV2'] = vars(eachVuln.impact.baseMetricV2)
            data['publishedDate'] = datetime.strptime(eachVuln.publishedDate.split('T')[0], '%Y-%M-%d').date()
            data['lastModifiedDate'] = datetime.strptime(eachVuln.lastModifiedDate.split('T')[0], '%Y-%M-%d').date()
            data['url'] = eachVuln.url
            data['v2score'] = eachVuln.v2score
            data['v2vector'] = eachVuln.v2vector
            data['v2severity'] = eachVuln.v2severity
            data['v2exploitability'] = eachVuln.v2exploitability
            data['v2impactScore'] = eachVuln.v2impactScore
            data['score'] = eachVuln.score
            if hasattr(eachVuln.impact, 'baseMetricV3'):
                # data['baseMetricV3'] = vars(eachVuln.impact.baseMetricV3)
                data['v3score'] = eachVuln.v3score
                data['v3vector'] = eachVuln.v3vector
                data['v3severity'] = eachVuln.v3severity
                data['v3exploitability'] = eachVuln.v3exploitability
                data['v3impactScore'] = eachVuln.v3impactScore
            self.cves[cpe].append(data)

