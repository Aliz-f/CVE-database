from .models import *
from .utils import *
from .serializers import *
from .utils import *

from celery import shared_task
import time
import logging
import os


@shared_task(max_retries=5, name='updateCve', queue='normal')
def updateCVe():
    try:
        iter_ok = 0
        iter_error = 0
        logging.info('Updating cve start')
        cveQuery = cveVulnerability.objects.all()
        for eachCve in cveQuery:
            cve = updateCve(eachCve.cveId)
            if eachCve.lastModifiedDate!=cve.get('lastModifiedDate'):
                cveSer = cveVulnerabilitySerializer(eachCve, cve)
                if cveSer.is_valid():
                    cveSer.save()
                    iter_ok+=1
                    logging.info(f'update {eachCve.cveId}')
                else:
                    iter_error +=1
                    logging.info(f'we have error in update {eachCve.cveId}')
            else:
                    logging.info(f'{eachCve.cveId} no need update')

        logging.info(f"{iter_ok} cve updated and {iter_error} cve not updated")
    except Exception as e:
        logging.info(str(e))


@shared_task(max_retries=5, name='updateCpe', queue='normal')
def updateCpe():
    try:
        logging.info('Updating cpe start')
        cpeIter = 0
        cveIter=0
        productQuery = product.objects.all()
        for eachProduct in productQuery:
            nvd = nvdDb(eachProduct.vendor, eachProduct.name, eachProduct.type)
            for eachCpe in nvd.cpes:
                cpeQuery = cpeVulnerability.objects.filter(name=eachCpe.get('name'))
                if cpeQuery.exists():
                    if cpeQuery[0].lastModifiedDate != eachCpe.get('lastModifiedDate'):
                        cpeSer = cpeVulnerabilitySerializer(cpeQuery[0], eachCpe)
                        if cpeSer.is_valid():
                            cpeSaved=cpeSer.save()
                            logging.info(f"{cpeQuery[0].name} updated")
                            cpeIter+=1
                            nvd.searchCVE(cpeSaved.name)
                            for eachVuln in nvd.cves[cpeSaved.name]:
                                cveQuery = cveVulnerability.objects.filter(cveId=eachVuln["cveId"]) 
                                if not cveQuery.exists():
                                    cveSerializer = cveVulnerabilitySerializer(data=eachVuln)
                                    if cveSerializer.is_valid():
                                        cveSaved = cveSerializer.save()
                                        cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                        cveIter+=1
                                        logging.info(f"{cveSaved.cveId} saved")
                                    else:
                                        id = eachVuln["cveId"]
                                        logging.info(f"{id} not saved")
                                elif cveQuery.exists() and not cveAndCpeShip.objects.filter(whichCpe=cpeSaved, whichCve=cveQuery).exists:
                                    cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                    logging.info(f"{cveQuery.cveId} ship saved")
                                else:
                                    pass
                        else:
                            logging.info(f"{cpeQuery[0].name} not updated")
                    else:
                        nvd.searchCVE(cpeQuery[0].name)
                        for eachVuln in nvd.cves[cpeQuery[0].name]:
                            cveQuery = cveVulnerability.objects.filter(cveId=eachVuln["cveId"]) 
                            if not cveQuery.exists():
                                cveSerializer = cveVulnerabilitySerializer(data=eachVuln)
                                if cveSerializer.is_valid():
                                    cveSaved = cveSerializer.save()
                                    cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                    cveIter+=1
                                    logging.info(f"{cveSaved.cveId} saved")
                                else:
                                    id = eachVuln["cveId"]
                                    logging.info(f"{id} not saved")
                            elif cveQuery.exists() and not cveAndCpeShip.objects.filter(whichCpe=cpeSaved, whichCve=cveQuery).exists:
                                cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                logging.info(f"{cveQuery.cveId} ship saved")
                            else:
                                pass                        
                        logging.info(f"{cpeQuery[0].name} no need updated")
                else:
                    cpeSerializer = cpeVulnerabilitySerializer(data=eachCpe)
                    if cpeSerializer.is_valid():
                        cpeSaved = cpeSerializer.save()
                        cpeIter+=1
                        logging.info(f"{cpeSaved.name} saved")
                        productCpeShip.objects.create(whichProduct =eachProduct, whichCpe = cpeSaved)
                        nvd.searchCVE(cpeSaved.name)
                        for eachVuln in nvd.cves[cpeSaved.name]:
                            cveQuery = cveVulnerability.objects.filter(cveId=eachVuln["cveId"]) 
                            if cveQuery.exists():
                                cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveQuery[0])
                                logging.info(f"{cpeSaved.title}:{cveQuery[0].cveId} saved")
                            else:
                                cveSerializer = cveVulnerabilitySerializer(data=eachVuln)
                                if cveSerializer.is_valid():
                                    cveSaved = cveSerializer.save()
                                    cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                    cveIter+=1
                                    logging.info(f"{cveSaved.cveId} saved")
                                else:
                                    id = eachVuln["cveId"]
                                    logging.info(f"{id} not saved")
                    else:
                        name = eachCpe.get('name')
                        logging.info(f"{name} not saved")
        logging.info(f"{cpeIter} cpe saved and {cveIter} cve saved")
    except Exception as e:
        logging.info(str(e))


@shared_task( max_retries=5, name='updateProduct', queue='normal')
def updateProduct():
    try:
        productIter =0
        cpeIter = 0
        cpe_CveShipIter = 0
        cveIter=0
        os_path = os.getcwd()+'/cpe/files/productList.csv'
        productList=readFile(os_path)
        for eachProduct in productList:
            productQuery = product.objects.filter(name=eachProduct.get('name'), vendor=eachProduct.get('vendor'))
            if not productQuery.exists():
                productSer = productSerializer(data=eachProduct)
                if productSer.is_valid():
                    productSaved = productSer.save()
                    productIter+=1
                    logging.info(f"{productSaved.vendor}:{productSaved.name} saved")
                    nvd = nvdDb(productSaved.vendor, productSaved.name, productSaved.type)
                    for eachCpe in nvd.cpes:
                        cpeSerializer = cpeVulnerabilitySerializer(data=eachCpe)
                        if cpeSerializer.is_valid():
                            cpeSaved = cpeSerializer.save()
                            cpeIter+=1
                            logging.info(f"{cpeSaved.name} saved")
                            productCpeShip.objects.create(whichProduct =productSaved, whichCpe = cpeSaved)
                            nvd.searchCVE(cpeSaved.name)
                            for eachVuln in nvd.cves[cpeSaved.name]:
                                cveQuery = cveVulnerability.objects.filter(cveId=eachVuln["cveId"]) 
                                if cveQuery.exists():
                                    cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveQuery[0])
                                    cpe_CveShipIter+=1
                                    logging.info(f"{cpeSaved.title}:{cveQuery[0].cveId} saved")
                                else:
                                    cveSerializer = cveVulnerabilitySerializer(data=eachVuln)
                                    if cveSerializer.is_valid():
                                        cveSaved = cveSerializer.save()
                                        cveAndCpeShip.objects.create(whichCpe=cpeSaved, whichCve=cveSaved )
                                        cveIter+=1
                                        logging.info(f"{cveSaved.cveId} saved")
                                    else:
                                        cveId = eachVuln.get('cveId')
                                        logging.info(f"{cveId} not saved")
                        else:
                            cpeTitle= eachCpe.get('title')
                            logging.info(f"{cpeTitle} not saved")
                else:
                    vendorName = eachProduct.get('vendor')
                    productName = eachProduct.get('product')
                    logging.info(f"{vendorName}:{productName} not saved")
            else:
                logging.info(f"{productQuery[0].vendor}:{productQuery[0].name} exists in db")
        logging.info(f"{productIter} product, {cpeIter} cpe, {cveIter} cve and {cpe_CveShipIter} cve-cpe ship saved.")
    except Exception as e:
        logging.info(str(e))